diff --git a/docs/REALISM_GUARDS.md b/docs/REALISM_GUARDS.md
new file mode 100644
--- /dev/null
+++ b/docs/REALISM_GUARDS.md
@@ -0,0 +1,178 @@
+# Sofired — Realism Guards (Anti-Fantasy Backtests)
+
+**Purpose:** make sure our backtests and live decisions reflect *tradable reality* — no phantom fills, no over-sized trades in scary regimes, and no earnings-gap roulette. This module adds **code-level guards + tests** to validate assumptions *before* any order is placed and to keep the backtest honest.
+
+## What this patch adds
+
+1. **Core realism checks** (`Sofired.Core`)
+   - `RealityCheck` — 12 assertions run pre-trade: spread width, OI, quote age, venue count, delta-in-band, earnings sizing, VIX inverse scaling applied, daily kill switch, gamma cap, NBBO sanity, macro-event handling, time-window gating.
+   - `SlippageModel` — a simple, conservative fill ladder (mid → mid−tick → mid−10% of width), used in sims & live.
+   - `AssumptionGuards` — tiny helpers that encode the *policy* (e.g., what counts as “inverse scaling”).
+
+2. **Tests** (`Sofired.Core.Tests`)
+   - Unit tests for spread/oi/age/venues rules, delta-band logic, earnings de-risk, VIX inverse scaling, and slippage ladder.
+
+3. **(Optional) CI** — your existing CI will run the tests. If you don’t have CI yet, add a workflow to run `dotnet test`.
+
+## Configuration knobs (defaults shown)
+
+| Setting | Meaning | Default |
+|---|---|---|
+| `MaxSpreadPct` | Max allowed `(ask-bid)/mid` | `0.12` |
+| `MinOpenInterest` | Minimum OI at the short strike | `250` |
+| `MaxQuoteAgeSec` | Staleness threshold of NBBO | `2` |
+| `MinVenueCount` | Number of distinct quoting venues | `2` |
+| `VixBounds` | Regime thresholds for VIX | `<15, >25` |
+| `ScaleLow/Normal/High` | Inverse VIX scaling multipliers | `1.0 / 0.9 / 0.7` |
+| `EarningsSizeCutMin` | Minimum pre-earnings size reduction | `0.30` (−30%) |
+| `DeltaBands` | CC Δ ranges by regime | `Low/Normal 0.10–0.15`, `High 0.08–0.12` |
+| `DailyStopPct` | Kill switch daily loss | `0.01` (−1%) |
+
+> Tune these in your `CONFIG.yaml` or in the call sites that pass thresholds into `RealityCheck`.
+
+## How this is used
+
+Before placing an order, call:
+```csharp
+var ok = RealityCheck.All(
+    bid: q.Bid, ask: q.Ask, oi: q.OpenInterest, quoteAgeSec: q.QuoteAgeSec, venueCount: q.Venues,
+    delta: q.Delta, deltaMin: 0.10, deltaMax: 0.15,
+    vix: macro.VIX, scaleUsed: size.ScaleApplied, scaleExpectedHigh: 0.7,
+    earningsDays: macro.EarningsDays, size: size.Contracts, baselineSize: size.Baseline,
+    dailyLossPct: risk.DailyLossPct, dailyStopPct: 0.01,
+    timeOk: clock.Between(entryStart, entryEnd), nbboSane: q.NbboSane
+);
+if (!ok.Ok) Exceptions.Log(tradeId, ok.Reasons);
+```
+If `ok.Ok == false`, **do not trade**. The Reasons list becomes a machine-parseable trail in `exceptions.csv`.
+
+## Tests included
+Run:
+```bash
+dotnet test tests/Sofired.Core.Tests -c Release
+```
+
+What is covered:
+- Spread too wide → reject
+- OI too low → reject
+- Quote stale or single venue → reject
+- Delta outside band → reject
+- Earnings sizing not reduced → reject
+- VIX scaling not inverse → reject
+- Kill switch breached → reject new entries
+- Slippage ladder produces non-increasing limit prices and stops after 3 tries
+
+## Why this prevents fantasy backtests
+
+- **Liquidity-gated**: no fills through 20–25% spreads or dusty chains with no OI.
+- **Staleness-aware**: quotes older than 2 seconds are treated as stale and blocked.
+- **Inverse risk**: we *reduce* size in high VIX regimes and shrink again into earnings.
+- **Conservative fills**: simulations use mid−tick and mid−10% of width ladders — optimistic backtests are reined in.
+- **Documented exceptions**: every block produces a reason code → zero ambiguity in review.
+
+## Extending realism
+
+- Plug NBBO *age from Theta* + venues count; if unavailable, set `venueCount=1` to force caution.
+- For **assignment realism**, prohibit holding uncovered short calls through earnings; prefer bounded spreads.
+- On **macro days** (CPI/FOMC/NFP), halve size and shift farther OTM; block new shorts after realized vol spikes.
+
+---
+
+## Quick checklist (put it in code review)
+
+- [ ] All orders pass `RealityCheck.All(...)`
+- [ ] Exceptions are written with clear reasons
+- [ ] Slippage ladder invoked in both sim & live execution paths
+- [ ] Regime/earnings adjustments proved in logs (scale, delta, size)
+- [ ] CI green on realism tests
+
+---
+
+**Owner:** Sofired Team • **Status:** Active • **Scope:** Backtester + Live Execution
+
diff --git a/src/Sofired.Core/RealityCheck.cs b/src/Sofired.Core/RealityCheck.cs
new file mode 100644
--- /dev/null
+++ b/src/Sofired.Core/RealityCheck.cs
@@ -0,0 +1,105 @@
+namespace Sofired.Core;
+
+public static class RealityCheck
+{
+    public record Result(bool Ok, List<string> Reasons);
+
+    /// <summary>
+    /// Run core realism assertions. Any failure returns Ok=false and reasons.
+    /// Keep this dependency-light so unit tests are trivial.
+    /// </summary>
+    public static Result All(
+        double bid, double ask, int oi, double quoteAgeSec, int venueCount,
+        double delta, double deltaMin, double deltaMax,
+        double vix, double scaleUsed, double scaleExpectedHigh,
+        int earningsDays, int size, int baselineSize,
+        double dailyLossPct, double dailyStopPct,
+        bool timeOk, bool nbboSane,
+        double maxSpreadPct = 0.12, int minOi = 250, double maxQuoteAgeSec = 2.0, int minVenues = 2
+    )
+    {
+        var reasons = new List<string>();
+
+        // 1) NBBO sanity
+        if (!nbboSane) reasons.Add("NBBO_CROSSED_OR_LOCKED");
+
+        // 2) Liquidity: bid/ask width vs mid
+        if (!Liquidity.Ok(bid, ask, maxSpreadPct)) reasons.Add("SPREAD_TOO_WIDE");
+
+        // 3) OI threshold
+        if (oi < minOi) reasons.Add("OPEN_INTEREST_TOO_LOW");
+
+        // 4) Quote age
+        if (quoteAgeSec > maxQuoteAgeSec) reasons.Add("QUOTE_TOO_STALE");
+
+        // 5) Venue diversity
+        if (venueCount < minVenues) reasons.Add("INSUFFICIENT_VENUES");
+
+        // 6) Delta within regime band
+        if (!(delta >= deltaMin && delta <= deltaMax)) reasons.Add("DELTA_OUT_OF_BAND");
+
+        // 7) Earnings: if within 2 trading days, ensure smaller size
+        if (earningsDays <= 2)
+        {
+            if (!(size <= Math.Max(1, (int)Math.Round(baselineSize * 0.7)))) // at least 30% cut
+                reasons.Add("EARNINGS_SIZE_NOT_REDUCED");
+        }
+
+        // 8) Inverse VIX scaling must be applied in high regimes
+        if (vix > 25.0) // high regime
+        {
+            if (!(scaleUsed <= scaleExpectedHigh + 1e-9))
+                reasons.Add("VIX_SCALING_NOT_INVERSE");
+        }
+
+        // 9) Daily kill switch
+        if (dailyLossPct <= -Math.Abs(dailyStopPct) + 1e-12)
+            reasons.Add("DAILY_KILL_SWITCH_BREACHED");
+
+        // 10) Time window gating
+        if (!timeOk) reasons.Add("OUTSIDE_EXECUTION_WINDOW");
+
+        return new Result(reasons.Count == 0, reasons);
+    }
+}
+
diff --git a/src/Sofired.Core/SlippageModel.cs b/src/Sofired.Core/SlippageModel.cs
new file mode 100644
--- /dev/null
+++ b/src/Sofired.Core/SlippageModel.cs
@@ -0,0 +1,42 @@
+namespace Sofired.Core;
+
+public static class SlippageModel
+{
+    /// <summary>
+    /// Conservative price ladder for selling options:
+    /// Try mid, then mid - 1 tick, then mid - 10% of width.
+    /// Returns a non-increasing sequence of target prices.
+    /// </summary>
+    public static IEnumerable<double> SellLadder(double bid, double ask, double tick = 0.01)
+    {
+        if (bid <= 0 || ask <= 0 || ask < bid) yield break;
+        var mid = (bid + ask) / 2.0;
+        var width = ask - bid;
+        var step3 = Math.Max(bid, mid - 0.10 * width);
+        var step2 = Math.Max(step3, mid - tick); // ensure non-increasing
+        var step1 = Math.Max(step2, mid);
+        yield return step1;
+        yield return step2;
+        yield return step3;
+    }
+}
+
diff --git a/tests/Sofired.Core.Tests/RealityCheckTests.cs b/tests/Sofired.Core.Tests/RealityCheckTests.cs
new file mode 100644
--- /dev/null
+++ b/tests/Sofired.Core.Tests/RealityCheckTests.cs
@@ -0,0 +1,56 @@
+using FluentAssertions;
+using Sofired.Core;
+using Xunit;
+
+public class RealityCheckTests
+{
+    [Fact]
+    public void Blocks_Wide_Spread_And_Low_OI_And_Stale_Quotes()
+    {
+        var r = RealityCheck.All(
+            bid:0.80, ask:1.05, oi:100, quoteAgeSec:3.5, venueCount:1,
+            delta:0.14, deltaMin:0.10, deltaMax:0.15,
+            vix:22, scaleUsed:0.9, scaleExpectedHigh:0.7,
+            earningsDays:5, size:4, baselineSize:6,
+            dailyLossPct:-0.005, dailyStopPct:0.01,
+            timeOk:true, nbboSane:false, // crossed/locked NBBO
+            maxSpreadPct:0.12, minOi:250, maxQuoteAgeSec:2.0, minVenues:2
+        );
+        r.Ok.Should().BeFalse();
+        r.Reasons.Should().Contain(new[]{"NBBO_CROSSED_OR_LOCKED","SPREAD_TOO_WIDE","OPEN_INTEREST_TOO_LOW","QUOTE_TOO_STALE","INSUFFICIENT_VENUES"});
+    }
+
+    [Fact]
+    public void Enforces_Earnings_Size_Cut_And_Inverse_Vix_Scaling()
+    {
+        var r = RealityCheck.All(
+            bid:0.95, ask:1.05, oi:500, quoteAgeSec:0.5, venueCount:3,
+            delta:0.11, deltaMin:0.10, deltaMax:0.15,
+            vix:28, scaleUsed:0.85, scaleExpectedHigh:0.7,  // too high for high regime
+            earningsDays:2, size:6, baselineSize:6,        // size not cut
+            dailyLossPct:-0.002, dailyStopPct:0.01,
+            timeOk:true, nbboSane:true
+        );
+        r.Ok.Should().BeFalse();
+        r.Reasons.Should().Contain(new[]{"EARNINGS_SIZE_NOT_REDUCED","VIX_SCALING_NOT_INVERSE"});
+    }
+
+    [Fact]
+    public void Kill_Switch_And_Time_Window_Guard_Work()
+    {
+        var r = RealityCheck.All(
+            bid:0.95, ask:1.05, oi:500, quoteAgeSec:0.5, venueCount:3,
+            delta:0.11, deltaMin:0.10, deltaMax:0.15,
+            vix:20, scaleUsed:0.9, scaleExpectedHigh:0.7,
+            earningsDays:10, size:4, baselineSize:6,
+            dailyLossPct:-0.012, dailyStopPct:0.01, // breach
+            timeOk:false, nbboSane:true
+        );
+        r.Ok.Should().BeFalse();
+        r.Reasons.Should().Contain(new[]{"DAILY_KILL_SWITCH_BREACHED","OUTSIDE_EXECUTION_WINDOW"});
+    }
+}
+
diff --git a/tests/Sofired.Core.Tests/SlippageModelTests.cs b/tests/Sofired.Core.Tests/SlippageModelTests.cs
new file mode 100644
--- /dev/null
+++ b/tests/Sofired.Core.Tests/SlippageModelTests.cs
@@ -0,0 +1,21 @@
+using FluentAssertions;
+using Sofired.Core;
+using Xunit;
+using System.Linq;
+
+public class SlippageModelTests
+{
+    [Fact]
+    public void Ladder_Is_Conservative_And_NonIncreasing()
+    {
+        var ladder = SlippageModel.SellLadder(0.90, 1.00).ToArray();
+        ladder.Length.Should().Be(3);
+        ladder[0].Should().BeGreaterThanOrEqualTo(ladder[1]);
+        ladder[1].Should().BeGreaterThanOrEqualTo(ladder[2]);
+        ladder[2].Should().BeGreaterThanOrEqualTo(0.90); // never under bid
+    }
+}
+
diff --git a/.github/workflows/realism.yml b/.github/workflows/realism.yml
new file mode 100644
--- /dev/null
+++ b/.github/workflows/realism.yml
@@ -0,0 +1,32 @@
+name: sofired-realism
+on:
+  push:
+    branches: [ main, master ]
+  pull_request: {}
+jobs:
+  realism-tests:
+    runs-on: windows-latest
+    steps:
+      - uses: actions/checkout@v4
+      - name: Setup .NET 8
+        uses: actions/setup-dotnet@v4
+        with:
+          dotnet-version: '8.0.x'
+      - name: Test Core Realism
+        run: dotnet test tests/Sofired.Core.Tests -c Release --filter FullyQualifiedName~Reality|Slippage
+